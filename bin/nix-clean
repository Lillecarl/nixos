#! /usr/bin/env python3

from datetime import timedelta
from time import time as unixtime
from pathlib import Path
from functools import partial

import argparse
import re
import sh
import sys
import os

nix: sh.Command = partial(sh.nix, _in=sys.stdin, _out=sys.stdout, _err=sys.stderr) # type: ignore

bootedSystemPath = "/run/booted-system"
currentSystemPath = "/run/current-system"

bootedSystemProfile: Path | None = None
currentSystemProfile: Path | None = None

dontclean=[
  bootedSystemPath,
  currentSystemPath,
  "$HOME/.local/state/nix/profiles/home-manager",
  "$HOME/.local/state/nix/profiles/profile",
]
clean=[
  "/nix/var/nix/profiles",
  "$HOME/.local/state/nix/profiles",
]
patterns=[
  r"home-manager-\d+-link$",
  r"profile-\d+-link$",
  r"system-\d+-link$",
]
home = f"/home/{os.environ.get("USER")}"
if os.environ.get("SUDO_USER"):
  home = f"/home/{os.environ.get("SUDO_USER")}"

dontclean=[Path(x.replace("$HOME", home)).resolve() for x in dontclean]
clean=[Path(x.replace("$HOME", home)) for x in clean]

def main():
  parser = argparse.ArgumentParser(
                      prog='nix-clean',
                      description='Clean up old nix profiles',
                      epilog='Text at the bottom of help')

  parser.add_argument('days', type=int, help='Days to keep profiles', default=0)

  args = parser.parse_args()

  doClean(args.days * 24 * 60 * 60)


def doClean(seconds: int):
  global bootedSystemProfile
  global currentSystemProfile

  print(f"Cleaning profiles older than {timedelta(seconds=seconds)}")
  for cleandir in clean:
    cleandir = Path(cleandir)

    print(f"Cleaning {cleandir}")

    for profile in cleandir.iterdir():
      if not profile.is_symlink():
        continue

      if not any([re.match(pattern, profile.name) for pattern in patterns]):
        continue

      try:
        profileStorePath = profile.resolve()

        if profileStorePath == Path(bootedSystemPath).resolve():
          bootedSystemProfile = profile
        if profileStorePath == Path(currentSystemPath).resolve():
          currentSystemProfile = profile

        created = int(profile.stat().st_ctime)
        curtime = int(unixtime())
        diff = curtime - created

        if profileStorePath in dontclean or diff < seconds:
          print(f"Keeping profile {profile} created {timedelta(seconds=diff)} ago")
        else:
          print(f"Removing profile {profile} created {timedelta(seconds=diff)} ago")
          try:
            profile.unlink()
          except PermissionError:
            print(f"Unable to remove profile {profile} try sudo")
      except FileNotFoundError:
        print(f"Broken symlink: {profile}")
        continue

  if bootedSystemProfile is not None:
    print(f"Booted system profile {bootedSystemProfile}")
  if currentSystemProfile is not None:
    print(f"Current system profile {currentSystemProfile}")

  print("Running 'nix store gc -vvv'")
  nix(["store", "gc", "-vvv"])

if __name__ == "__main__":
  main()
