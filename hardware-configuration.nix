# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

rec {
  imports = [
    (
      modulesPath + "/installer/scan/not-detected.nix"
    )
  ];

  services.tlp = {
    enable = true;
    settings = {
      "CPU_SCALING_GOVENOR_ON_AC" = "performance";
      "CPU_SCALING_GOVENOR_ON_BAT" = "powersave";
      "START_CHARGE_THRESH_BAT0" = 75;
      "STOP_CHARGE_THRESH_BAT0" = 80;
    };
  };
  powerManagement.powertop.enable = true;

  nixpkgs.config.packageOverrides = pkgs: {
    vaapiIntel = pkgs.vaapiIntel.override { enableHybridCodec = true; };
  };

  hardware = {
    opengl = {
      enable = true;
      extraPackages = with pkgs; [
        intel-media-driver # LIBVA_DRIVER_NAME=iHD
        vaapiIntel         # LIBVA_DRIVER_NAME=i965 (older but works better for FF/Chromium)
        vaapiVdpau
        libvdpau-va-gl
      ];
    };

    # Enables all System76 Firmware
    system76.enableAll = lib.mkDefault true;
    # Enables binary blobs
    enableRedistributableFirmware = true;
    # Enables bluetooth
    bluetooth = {
      enable = true;
      # This enables a2dp-sink, which is HQ audio w/o mic. (Needed for pairing WH-1000XM3)
      settings = {
        General = {
          Enable = "Source,Sink,Media,Socket";
        };
      };
    };
  };

  #security = {
  #  tpm = {
  #    enable = true;
  #    abrmd.enable = true;
  #  };
  #};

  boot = {
    # boot with grub rather than systemd-boot because we want mirrored bootloaders
    # set EFI variables to look for kernels where we want (NVRAM), disabled since we install as removeable
    # must set this to true and disable efiInstallAsRemovable to do system76 firmware updates
    # boot.loader.efi.canTouchEfiVariables = true;
    loader.grub = {
      enable = true;
      # We use GPT and our boot partitions are FAT32
      # nodev means don't install MBR bogus on early blocks
      device = "nodev";
      efiSupport = true;
      # Not sure if needed, TODO research
      enableCryptodisk = true;
      # should already be implicit
      copyKernels = true;
      # efi standard makes sure we boot from these even if NVRAM dies or we fail to update it
      # https://search.nixos.org/options?show=boot.loader.grub.efiInstallAsRemovable&type=packages&query=efi
      efiInstallAsRemovable = true;
      mirroredBoots = [
        #{
        #  "devices" = [ "nodev" ];
        #  "path" = "/boot";
        #  "efiSysMountPoint" = "/boot";
        #}
        {
          "devices" = [ "nodev" ];
          "path" = "/boot-fallback";
          "efiSysMountPoint" = "/boot-fallback";
        }
      ];
    };

    # Plymouth, shows a splash screen rather than systemd boot sequence
    # since our system boots to bloody fast this is barely noticeable
    plymouth.enable = true;

    # initrd = initial ramdisk.
    initrd = {
      # RAID configuration, can be exported with "sudo mdadm --scan --export" 
      mdadmConf = ''
        ARRAY /dev/md/1337 level=raid1 num-devices=2 metadata=1.2 name=nixos:1337 UUID=aec75f01:8035340e:0689cd7a:7e344342
           devices=/dev/nvme0n1p2,/dev/nvme1n1p2
      '';

      availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "sd_mod" "sdhci_pci" ];
      kernelModules = [ ];
      # Decrypt our mdadm data RAID parition (/dev/md/1337p2)
      luks.devices."crypt0".device = "/dev/disk/by-uuid/7932002d-70fe-4966-abec-6a679a5ebd91";
      luks.devices."crypt0".fallbackToPassword = true;
    };

    #kernelPackages = pkgs.linuxPackages_5_14;
    #kernelPackages = pkgs.linuxPackages_latest;
    extraModulePackages = with config.boot.kernelPackages; [
      v4l2loopback
      evdi
      akvcam
      cryptodev
      system76
      system76-io
      system76-acpi
    ];
    # udl was here, which is the old displaylink driver
    kernelModules = [ "evdi" "kvm-intel" "vfio_virqfd" "vfio_pci" "vfio_iommu_type1" "vfio" ];
    kernelParams = [ "intel_iommu=on" ];
  };

  # Root BTRFS filesystem, let's hope ZFS implements support for hibernation soon!
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/a48a0b28-4f7f-4b20-b52e-a4f69ae636c7";
    fsType = "btrfs";
  };

  # Primary bootloader
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/B0B5-42A2";
    fsType = "vfat";
    # Write to disk "as soon as reasonable"
    # seems to be required to not fuck the bootloader (using a sync script atm)
    options = [ "defaults" "flush" ];
  };

  # Secondary bootloader
  fileSystems."/boot-fallback" = {
    device = "/dev/disk/by-uuid/1D41-D24F";
    fsType = "vfat";
    # Write to disk "as soon as reasonable"
    # seems to be required to not fuck the bootloader (using a sync script atm)
    options = [ "defaults" "flush" ];
  };

  # Swap device, this is raided
  swapDevices = [
    {
      device = "/dev/disk/by-uuid/83f469d8-1da6-47b4-a808-204ca591ce28";
    }
  ];
}
